#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;

//Question 3
class Plane {
    private: 
    double pos;
    double vel;
    double distance;
    bool at_SCE;
    string origin, destination;
    static vector<string> destinations;
    static vector<int> miles;

    //Variable to track deestinations and miles vector initilaization
    static bool initialized;

    public:
    //Constructor
    Plane(string from, string to){
        //Making sure destinations and miles vectors are initialized
        if (!initialized) {
            initialize();
            initialized = 1;
        }
        origin = from;
        destination = to;
        //Finding the indexes of the correct elements within the destinations vector 
        auto startiteration = find(destinations.begin(), destinations.end(), origin);
        auto enditeration = find(destinations.begin(), destinations.end(), destination);
        int startindex = startiteration - destinations.begin(); 
        int endindex = enditeration - destinations.begin();  

        //Calculating distance based off of the matching indexes of the destinations and miles vectors
        distance = miles[startindex]+miles[endindex];  
        pos = 0;
        vel = 0;
        at_SCE = 0;
        cout << "Plane Created at " << this << endl;
    }

    //Desructor
    ~Plane() {
        cout << "Plane Destroyed" << endl;
    }

    //Operate function
    void operate(double dt) {
        if(pos < distance){
            pos += (vel/3600)*dt; //Converting inputted velocity value of mph to miles per second
            at_SCE = 0;
            return;
        }
        else{
            if(destination == "SCE"){
                at_SCE = 1;
                swap(origin, destination);
                pos = 0.0;
                return;
            }
            swap(origin, destination);
            pos = 0.0;
            return;
        }
    }

    //Getters
    double getpos() const {
        return pos;
    }

    string getorigin() const {
        return origin;
    }

    string getdestination() const {
        return destination;
    }

    bool getatsce() const {
        return at_SCE;
    }

    double getvel() const {
        return vel;
    }

    //Setter for velocity
    void setvel(double newvel) {
        vel = newvel;
    }

    //Initialize function for destinations and miles vectors
    private:
    static void initialize() {
        destinations[0] = "PHL"; 
        destinations[1] = "ORL"; 
        destinations[2] = "EWR";
        miles[0] = 160;
        miles[1] = 220, 
        miles[2] = 640;
    }

};

//Question 6
class Pilot {
    private:
    string name;

    public:
    //Constructor
    Pilot(string name){
        this->name = name;
        cout << "Pilot " << this->name << " with certificate number " << this << " is at the gate, ready to board the plane." << endl;
    }

    ~Pilot(){
        cout << "Pilot " << name << " is out of the plane." << endl;
    }

    string getname() const {
        return name;
    }

    Plane* myPlane;
};

// Question 2: Modified for Question 3
//Index is the same for the destinations and miles vectors 
vector<string> Plane::destinations(3);
vector<int> Plane::miles(3);
bool Plane::initialized = 0;

//Question 5
int main()
{
    //Question 5 and 7
    Pilot pilot1("Alpha");
    Pilot pilot2("Unknown");
    Plane plane1("SCE","PHL");
    plane1.setvel(450); //[450 miles per hour]
    double timestep = 15; //[seconds]
    double timemax = 9000; //[seconds]
    for(int time = 0; time < (timemax/timestep); time = time + 1){
        plane1.operate(timestep);
        double position = plane1.getpos();
        cout << "Time: " << timestep*(time+1) << " seconds, Position: " << position << " miles." <<  endl;
        if (plane1.getatsce() == 1){
            cout << "The Plane " << &plane1 << " is at SCE." << endl;

            //Switching control for pilots
            static bool pilotincommand = 1;
            if (pilotincommand == 1) {
                cout << "Pilot " << pilot2.getname() << " is now in command of plane " << &plane1 << endl;
                pilotincommand = 0;
            }
            else {
                cout << "Pilot " << pilot1.getname() << " is now in command of plane " << &plane1 << endl;
                pilotincommand = 1;
            }
        }
    }



return 0;
}
